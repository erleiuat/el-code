/* eslint-disable @typescript-eslint/naming-convention */

module.exports = {
  env: {
    browser : true,
    node    : true,
  },
  extends        : 'eslint:recommended',
  // globals        : { module: 'readonly' },
  ignorePatterns : [
    'out',
    'dist',
    '**/*.d.ts',
  ],
  parser        : '@typescript-eslint/parser',
  parserOptions : {
    ecmaVersion : 6,
    sourceType  : 'module',
  },
  plugins : [ '@typescript-eslint' ],
  root    : true,
  rules   : {
    '@typescript-eslint/naming-convention' : 'warn',
    '@typescript-eslint/semi'              : [ 'warn', 'never' ],

    'array-bracket-newline' : [ 'error', { minItems: 10, multiline: true } ],
    'array-bracket-spacing' : [ 'error', 'always' ],
    'array-element-newline' : [ 'error', { ArrayExpression: 'consistent', ArrayPattern: { minItems: 3 } } ],

    'arrow-parens'                   : [ 'error', 'as-needed' ],
    'arrow-spacing'                  : 'error',
    'block-spacing'                  : 'error',
    'brace-style'                    : [ 'error', '1tbs', { allowSingleLine: true } ],
    'comma-dangle'                   : [ 'error', 'always-multiline' ],
    'comma-spacing'                  : [ 'error', { after: true, before: false } ],
    'comma-style'                    : [ 'error', 'last' ],
    'complexity'                     : [ 'warn', 20 ],
    'computed-property-spacing'      : [ 'error', 'never' ],
    'curly'                          : [ 'warn', 'multi', 'consistent' ],
    'default-case'                   : 'error',
    'default-case-last'              : 'error',
    'eol-last'                       : [ 'error', 'always' ],
    'eqeqeq'                         : 'warn',
    'func-call-spacing'              : [ 'error', 'never' ],
    'function-call-argument-newline' : [ 'error', 'consistent' ],
    'function-paren-newline'         : [ 'error', 'consistent' ],
    'indent'                         : [ 'error', 2, { SwitchCase: 1 } ],
    'jsx-quotes'                     : [ 'error', 'prefer-single' ],
    'key-spacing'                    : [
      'warn',
      {
        align      : { afterColon: true, beforeColon: true, on: 'colon' },
        multiLine  : { afterColon: true, beforeColon: false },
        singleLine : { afterColon: true, beforeColon: false },
      },
    ],
    'keyword-spacing'      : [ 'error', { before: true } ],
    'linebreak-style'      : [ 'error', 'unix' ],
    'lines-around-comment' : [
      'error',
      {
        afterBlockComment  : false,
        afterLineComment   : false,
        beforeBlockComment : true,
        beforeLineComment  : true,
      },
    ],
    'lines-between-class-members': [ 'error', 'always', { exceptAfterSingleLine: true } ],

    'max-depth' : [ 'warn', 5 ],
    'max-len'   : [
      'warn',
      {
        code                   : 120,
        ignoreComments         : true,
        ignoreRegExpLiterals   : true,
        ignoreTrailingComments : true,
        ignoreUrls             : true,
      },
    ],
    'max-lines'               : [ 'warn', { max: 250, skipBlankLines: true, skipComments: true } ],
    'max-lines-per-function'  : [ 'warn', { max: 250, skipBlankLines: true, skipComments: true } ],
    'max-nested-callbacks'    : [ 'warn', 5 ],
    'max-params'              : [ 'warn', 10 ],
    'max-statements'          : [ 'warn', 20, { ignoreTopLevelFunctions: true } ],
    'max-statements-per-line' : [ 'error', { max: 1 } ],

    'multiline-ternary'                : [ 'error', 'always-multiline' ],
    'new-parens'                       : 'error',
    'newline-per-chained-call'         : [ 'error', { ignoreChainWithDepth: 4 } ],
    'no-extra-parens'                  : [ 'error', 'all', { nestedBinaryExpressions: false } ],
    'no-inline-comments'               : 'error',
    'no-irregular-whitespace'          : 'error',
    'no-mixed-spaces-and-tabs'         : 'error',
    'no-multi-spaces'                  : 'error',
    'no-multi-str'                     : 'error',
    'no-multiple-empty-lines'          : [ 'error', { max: 1, maxEOF: 0 } ],
    'no-spaced-func'                   : 'error',
    'no-throw-literal'                 : 'warn',
    'no-trailing-spaces'               : 'error',
    'no-undef'                         : 'warn',
    'no-unexpected-multiline'          : 'error',
    'no-unused-vars'                   : 'warn',
    'no-whitespace-before-property'    : 'error',
    'nonblock-statement-body-position' : [ 'error', 'any' ],

    'object-curly-newline': [
      'error',
      {
        ExportDeclaration : { consistent: true },
        ImportDeclaration : { consistent: true },
        ObjectExpression  : { consistent: true, minProperties: 6, multiline: true },
        ObjectPattern     : { consistent: true, minProperties: 6, multiline: true },
      },
    ],
    'object-curly-spacing'    : [ 'error', 'always' ],
    'object-property-newline' : [ 'error', { allowAllPropertiesOnSameLine: true } ],

    'operator-linebreak'              : [ 'error', 'before' ],
    'padded-blocks'                   : [ 'error', { classes: 'always', switches: 'always' } ],
    'padding-line-between-statements' : [
      'error',
      { blankLine: 'always', next: 'return', prev: '*' },
      { blankLine: 'always', next: [ 'function' ], prev: '*' },
      { blankLine: 'never', next: [ 'expression' ], prev: [ 'expression' ] },
      { blankLine: 'always', next: '*', prev: [ 'const', 'let', 'var' ] },
      { blankLine: 'any', next: [ 'const', 'let', 'var', 'if' ], prev: [ 'const', 'let', 'var' ] },
    ],

    'prefer-const'         : 'error',
    'prefer-object-spread' : 'error',
    'prefer-spread'        : 'error',
    'prefer-template'      : 'error',

    'quote-props'         : [ 'error', 'consistent-as-needed' ],
    'quotes'              : [ 'error', 'single', { allowTemplateLiterals: true, avoidEscape: true } ],
    'rest-spread-spacing' : [ 'error', 'never' ],
    'semi'                : [ 'warn', 'never' ],
    'semi-spacing'        : [ 'error', { after: true, before: false } ],

    'sort-imports' : 'error',
    'sort-keys'    : 'error',
    'sort-vars'    : 'error',

    'space-before-blocks'         : 'error',
    'space-before-function-paren' : 'error',
    'space-in-parens'             : [ 'error', 'never' ],
    'space-infix-ops'             : [ 'error', { int32Hint: false } ],
    'space-unary-ops'             : [ 'error', { nonwords: false, words: true } ],
    'spaced-comment'              : [ 'error', 'always' ],

    'switch-colon-spacing'   : 'error',
    'template-curly-spacing' : [ 'error', 'always' ],
    'vars-on-top'            : 'error',
    'wrap-iife'              : [ 'error', 'outside' ],
    'wrap-regex'             : 'error',
  },
}
